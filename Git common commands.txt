Git 常用命令

0.切换路径
	cd d:solution/git/
	
1.初始化Git
	git config --global user.name "Kimi"
	git config --gloabl user.email "kimi@Gmail.com"

2.创建存储库
	git init

3.把文件添加到仓库
	git add filename.txt

4.将文件提交到仓库
	git commit -m "本次提交的说明文字"

5.查看仓库的当前状态
	git status
	
6.查看文件的修改情况，前提是 git status 命令提示文件被修改过。文件名区分大小写，文件名中的空格用“\ ”即可
	git diff FileName.txt
	git diff "File Name.txt"
	git diff File\ Name.txt
	
7.查看历史提交记录
	git log
	git log --pretty=oneline

8.版本回退。首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
	git reset --hard HEAD^
	git reset --hard 1094a

9.查看命令历史。获取commit id，以便重返未来
	git reflog

10.查看工作区与版本库里面最新版本的区别
	git diff HARD -- FileName.txt

11.撤销文件在工作区的修改。这里有两种情况：
	一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
	一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
	总之，就是让这个文件回到最近一次git commit或git add时的状态。
	git checkout -- FileName.txt

12.撤销暂存区的修改，重新放到工作区。HEAD表示最新的版本。如需继续撤销工作区的修改（使用第11节的命令）
	git reset HARD FileName.txt

13.如果提交了不合适的修改到版本库，想要撤回修改需要使用版本回退（使用第8节的命令），前提是没有推送到远程库

14.从版本库中删除一个文件
	git rm FileName.txt
	git commit -m "Delete FileName.txt"

15.恢复误删除的文件使用第11节的命令

16.在用户主目录生成SSH Key秘钥文件（C:\Users\Administrator\.ssh）
	ssh-keygen -t rsa -C "youremail@example.com"

17.将本地存储库与远程仓储关联，语法：git remote add origin git@server-name:path/repo-name.git
	git remote add origin git@github.com:Neytlds/GitDemo.git

	origin:远程库的名字，git的默认叫法
	Neytlds:GitHub的账户名
	GitDemo:GitHub上存储库的名称

18.将本地库所有内容推送到远程库
	git push -u origin master	第一次推送使用参数：-u。Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令
	git push origin master		再次提交就可以不使用-u参数了

19.从远程仓库克隆到本地
	git clone git@github.com:Neytlds/GitDemo.git

20.创建名为dev的分支
	git branch dev

21.切换到dev分支
	git checkout dev	（旧的方式，不推荐使用）
	git switch dev		（git推荐）

22.创建名为dev的分支，并切换到dev分支
	git checkout -b dev		（旧的方式，不推荐使用）
	git switch -c dev		（git推荐）

23.查看当前分支
	git branch

24.合并给定分区到当前分区（将分区dev合并到master分区）
	git branch master	切换到master分区（git不推荐）
	git merge dev		将dev分区合并到master分区

25.删除dev分区anch
	git branch -d dev

   强制删除一个没有被合并过的分区
	git branch -D dev

26.查看分支合并图
	git log --graph --pretty=oneline --abbrev-commit
	git log --graph

27.合并dev分支并禁用Fast Forward，将生成一个新的commit，所以使用-m参数保存提交信息。禁用Fast Forward合并分支将保留分支信息
	git merge --no-ff -m "merge with No Fast Forward" dev

28.将工作区未提交的修改进行临时存储，以便跳转到其它分支修复bug
	git stash

29.查看临时存储的列表
	git stash list

30.将临时存储区的工作恢复，并删除临时存储
	git stash pop		将临时存储区的工作恢复，并删除临时存储
	或者
	git stash apply		恢复临时存储的工作内容
	git stash drop		删除临时存储

31.可以多次stash，回复的时候先用 git stash list 查看，然后恢复到指定stash
	git stash apply statsh@{0}

32.复制一个特定的提交到当前分支
	git cherry-pick 4c805e2

33.查看远程库信息
	git remote
	git remote -v	显示详细信息

34.推送分支到远程库
	git push origin master
	git push origin dev
	git push origin feature1

35.设置dev分支与远程库origin/dev分支的链接
	git branch --set-upstream-to=origin/dev dev

36.把最新提交从远程库origin/dev拉取下来
	git pull

37.将本地未推送到远程库的分支历史整理成直线，使得在阅读历史提交变化时更容易
	git rebase

38.创建标签
	git tag v1.0											在当前提交上创建标签，标签名称是“v1.0”
	git tag v0.9 f52c633									在提交f52c633上创建标签，标签名称是“v0.9”
	git tag -a v0.1 -m "version 0.1 released" f52c633		在提交f52c633上创建标签，标签名称是“v0.1”，标签的说明文字是“version 2.0 released”

39.查看所有标签（注意：标签是按字母顺序列出的）
	git tag

40.查看标签信息（注意：标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签）
	git show v0.9		显示标签“v0,9”的信息

41.删除本地的标签
	git tag -d v1.0

42.将标签推送到远程库（标签存储在本地，不会自动推送到远程库）
	git push origin v1.0		将名称是“v1.0”的标签推送到远程库
	git push origin --tags		将所有本地标签推送到远程库

43.删除已经推送到远程库的标签
	git tag -d v0.9						先删除本地库的标签
	git push origin :refs/tags/v0.9		再删除远程库的标签
