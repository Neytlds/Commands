Docker 常用命令

1.查看 docker 的版本
	docker version
    docker --version    // docker 软件的版本

2.查看 docker 的信息
    docker info

3.查看镜像列表。image：镜像，类似ISO。
    docker images
    docker images ls

4.查看正在运行的容器
    docker ps

5.查看所有容器
    docker ps -a

6.查看容器列表
    docker container ls
    docker container ls --all
    docker container ls -aq

7.从 Docker Hub 上拉取镜像到本地
    docker pull mongo           // 拉取 mongo db 最新版的镜像到本地
    docker pull mongo:3.6.18    // 拉取 mongo db 的 3.6.18 版本的镜像到本地

8.删除镜像
    docker rmi 7a               // 使用 IMAGE ID 删除镜像。注意：当没有重复的情况下，可以简写
    docker rmi mongo            // 使用 REPOSITORY（镜像名称） 删除镜像。注意：这里必须使用全称
    docker rmi mongo:3.6.18     // 使用 REPOSITORY + TAG（版本号） 删除镜像

9.运行名为 hello-world 的 docker 镜像，如果本地没有这个镜像，则从 Docker Hub 上下载后运行
    docker run hello-world
    docker run -it --rm -p 8000:80 --name aspnetcore_sample mcr.microsoft.com/dotnet/core/samples:aspnetapp

    docker run 参数说明：
        -it                                                 容器运行后自动进入容器的 bash 进行交互
        -d                                                  分离模式，使容器运行在后台（与 -it 应该不能同时执行）
        --rm                                                容器运行后自动删除这个容器
        -p 8000:80                                          映射端口：在外部通过8000端口访问容器内的80端口
        --name aspnetcore_sample                            设置启动容器的名称为：aspnetcore_sample
        mcr.microsoft.com.dotnet/core/samples:aspnetapp     运行的镜像名称

10.运行一个容器
    docker start hello-world        // 通过 名称 运行容器
    docker start 87                 // 通过 ID 运行容器

11.停止运行容器。注意：停止后，容器中的数据和状态保持不变
    docker stop hello-world         // 通过 名称 停止容器
    docker stop 87                  // 通过 ID 停止容器
    docker stop 87 26 d4            // 停止 ID 为 87、26 和 d4 的容器
    docker stop $(docker ps -aq)    // 停止所有运行的容器(在 cmd 中无法使用这个命令)，-a：返回所有容器；q：只返回容器的ID；$(docker ps -aq)：返回所有容器 ID 的列表
    ctrl + c                        // 快捷键：停止容器中的应用，同时停止运行的容器
    ctrl + p, ctrl + q              // 停止容器中的应用，同时保持容器的运行（先按快捷键 crtl + p，再按快捷键 ctrl + q）

12.删除停止的容器
    docker rm hello-world

13.进入正在运行容器的 bash 与之交互
    docker exec -it 87 /bin/bash

14.退出容器的 bash
    exec                                    在 Windows 系统中退出 bash 模式
    ctrl + p + q


Swarm 操作（集群操作）：

15.建立虚拟机（Linux版）
    sudo docker swarm init --advertise-addr 192.168.1.100:2377 --listen-addr 192.168.1.100:2377
    
    docker swarm init 参数说明：
        sudo                                                在 Linux 中启用管理员权限运行命令
        --advertise-addr 192.168.1.100:2377                 无论服务器中有多少个 IP 地址，始终使用 192.168.1.100:2377 作为 docker swarm 相关应用
        --listen-addr 192.168.1.100:2377                    需要监听的 IP 地址
    注：IP 地址最好使用内网 IP 地址

16.建立 service
    docker service create --name ServiceName -p 8000:80 -replicas 5 microsoft/dotnet-samples:aspnetapp
    docker service create --name ServiceName --network NetWorkName -p 8000:80 -replicas 5 datagridsys/sample-vote:1.0

    参数说明：
        -replicas 5                                         运行 5 个复制容器
        --network NetWorkName                               overlay network 名称

17.扩展 service 的节点数量到 10 个
    docker service update --replicas 10 microsoft/dotnet-samples:aspnetapp
    docker service scale ServiceName=10

18.删除 service
    docker service rm ServiceName

19.查看运行中的 service 列表
    docker service ls

20.查看运行的所有 service 的详细列表
    docker service ps ServiceName
    docker service ps ServiceName ｜ grep :2.0

    参数说明：
        ServiceName                                          必填，运行 service 的名称
        grep :2.0                                            只查看 2.0 版本的镜像

21.查看 service 的详细信息
    docker service inspect ServiceName

    参数说明：
        ServiceName                                          必填，运行 service 的名称

22.更新 service
    docker service update --image datagridsys/sample-vote:2.0 --update-parallelism 2 --update-delay 10s ServiceName

    参数说明：
        --image datagridsys/sample-vote:2.0                     镜像更新的名称和版本
        --update-parallelism 2                                  每次更新 service 的数量
        --update-delay 10s                                      更新的间隔

22.建立 overlay network
    docker network create -d overlay my-net                 my-net：名称

23.查看建立的 overlay network
    docker network ls
